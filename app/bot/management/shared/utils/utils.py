import asyncio
import logging
import re
from datetime import datetime
import itertools

from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from app.config.settings import settings

logger = logging.getLogger(__name__)


SQL_INJECTION_PATTERN = re.compile(r"'|--|(/\*(?:.|[\r\n])*?\*/)|\b(?:select|insert|update|delete|drop|alter|union|create|rename)\b", re.IGNORECASE)
def sanitize_text(text: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç HTML-—Ç–µ–≥–æ–≤ –∏ —Ç–∏–ø–∏—á–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è SQL-–∏–Ω—ä–µ–∫—Ü–∏–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
      text (str): –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      str: –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    cleaned_text = text
    if isinstance(text, str):
        text = text.replace("<", "").replace(">", "").strip()
        cleaned_text = re.sub(SQL_INJECTION_PATTERN, '', text)
    return cleaned_text


def generate_dynamic_lines(text: str) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π –ª–∏–Ω–∏–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç.

    Returns:
        str: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ '‚ûñ', –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏–Ω—ã –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    """
    cleaned = sanitize_text(text)
    length = len(cleaned)
    min_symbols, max_symbols = 2, 6   # –ú–∏–Ω–∏–º—É–º 2, –º–∞–∫—Å–∏–º—É–º 6
    count = max(min_symbols, min(max_symbols, length // 5))
    separator = '‚ûñ' * count
    return f"{text}\n{separator}"


def format_datetime_in_default_timezone(dt: datetime | None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç datetime –≤ —Å—Ç—Ä–æ–∫—É –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (DEFAULT_TIMEZONE).

    Args:
        dt (datetime | None): –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞-–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM.YYYY HH:MM TZ' –∏–ª–∏ '–ù–µ—Ç', –µ—Å–ª–∏ dt is None.
    """
    if dt is None:
        return "–ù–µ—Ç"
    tz = settings.DEFAULT_TZ
    dt_converted = dt.astimezone(tz)
    return f"{dt_converted.strftime('%d.%m.%Y %H:%M')} {settings.DEFAULT_TZ_ABBR}"


def get_current_time_in_default_timezone():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞-–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM.YYYY HH:MM TZ', –≥–¥–µ TZ ‚Äì —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    tz = settings.DEFAULT_TZ
    dt_converted = datetime.now(tz)
    return f"{dt_converted.strftime('%d.%m.%Y %H:%M')} {settings.DEFAULT_TZ_ABBR}"


async def animate_waiting_message(event: CallbackQuery | Message, signature: str = '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –æ—Ç–≤–µ—Ç', interval: float = 0.8,
                                  max_cycles: int | None = None, finish_text: str | None = None) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º–∏ —ç–º–æ–¥–∑–∏ –∏ —Ç–æ—á–∫–∞–º–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ.

    Args:
        event (CallbackQuery | Message): –û–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
        signature (str): –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —ç–º–æ–¥–∑–∏ –∏ —Ç–æ—á–µ–∫.
        interval (float): –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        max_cycles (int | None): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ü–∏–∫–ª–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏.
        finish_text (str | None): –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω.
    """
    emojis = itertools.cycle("üïõüïêüïëüïíüïìüïîüïïüïñüïóüïòüïôüïö")
    dots = itertools.cycle(["", ".", "..", "..."])
    send_method = event.message.answer if isinstance(event, CallbackQuery) else event.answer
    message = await send_method(text=f"{next(emojis)} <b>{signature}</b>", disable_web_page_preview=True)

    cycle = 0
    try:
        while max_cycles is None or cycle < max_cycles:
            await asyncio.sleep(interval)
            try:
                await message.edit_text(f"{next(emojis)} <b>{signature}{next(dots)}</b>")
            except TelegramBadRequest:
                pass
            cycle += 1
    finally:
        if finish_text:
            try:
                await message.edit_text(finish_text)
            except TelegramBadRequest:
                await message.delete()
        else:
            await message.delete()


def split_long_message(text: str, max_length: int = 4000) -> list[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram,
    —Å–æ—Ö—Ä–∞–Ω—è—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å HTML-—Ç–µ–≥–æ–≤.

    Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4096 —Å–∏–º–≤–æ–ª–æ–≤).
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –¥–µ–ª–∏—Ç —Ç–µ–∫—Å—Ç –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫, –ø—Ä–∏ —ç—Ç–æ–º
    —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ HTML-—Ç–µ–≥–∏, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.

    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å
        max_length (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 4000

    Returns:
        list[str]: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç `max_length` —Å–∏–º–≤–æ–ª–æ–≤
                   –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ HTML-—Ç–µ–≥–∏.

    """
    tag_pattern = re.compile(r"(<\/?[\w]+(?:\s[^>]*)?>)")
    parts = tag_pattern.split(text)

    chunks = []
    current = ""
    open_tags = []

    def flush_current():
        nonlocal current
        if not current.strip():
            return
        closing = ''.join(f"</{tag}>" for tag in reversed(open_tags))
        chunks.append(current + closing)
        current = ""

    for part in parts:
        if tag_pattern.fullmatch(part):
            is_open = not part.startswith("</")
            tag_name = re.findall(r"<\/?([\w]+)", part)[0]

            if is_open:
                open_tags.append(tag_name)
            else:
                if tag_name in open_tags[::-1]:
                    open_tags.remove(tag_name)
            current += part
        else:
            while len(current + part) > max_length:
                remaining = max_length - len(current)
                split_point = max(part.rfind(' ', 0, remaining), part.rfind('\n', 0, remaining))
                if split_point == -1:
                    split_point = remaining

                current += part[:split_point]
                flush_current()
                current = ''.join(f"<{tag}>" for tag in open_tags)
                part = part[split_point:]
            current += part

    flush_current()
    return chunks


async def delete_messages_from_state(state: FSMContext, event: CallbackQuery | Message) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–æ—Ç–æ—Ä—ã—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –ø–æ–¥ –∫–ª—é—á–æ–º 'message_ids'.
    –ü–æ—Å–ª–µ –ø–æ–ø—ã—Ç–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ñ—É–Ω–∫—Ü–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'message_ids' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    data = await state.get_data()
    message_ids = data.get('message_ids', [])
    if message_ids:
        for msg_id in message_ids:
            try:
                await event.bot.delete_message(chat_id=event.from_user.id, message_id=msg_id)
                await asyncio.sleep(0.1)
            except (TelegramBadRequest, AttributeError):  # AttributeError: 'InaccessibleMessage' object has no attribute 'delete'
                pass
        await state.update_data(message_ids=[])